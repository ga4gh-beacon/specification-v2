openapi: 3.0.2
servers: []
info:
  version: "2.0.0-draft.1"
  title: GA4GH Beacon API Specification
  description: >-
    A Beacon is a web service for genetic data sharing that can be queried for 
    information about variants, individuals or samples.
  contact:
    email: beacon@ga4gh.org
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
externalDocs:
  description: |
    'Beacon Project'
  url: 'http://beacon-project.io/'
paths:
  /:
    get:
      description: |
        Get information about the beacon
      operationId: getBeacon
      tags:
        - Endpoints
      responses:
        '200':
          description: |
            Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beacon'
  /individuals:
    post:
      description: |
        Get response to a beacon query for individual information.
      operationId: postIndividualResponse
      tags:
        - Endpoints
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
        required: true
      responses:
        '200':
          description: |
            Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualResponse'
        '400':
          description: |
            Bad request (e.g. missing mandatory parameter)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualResponse'
        '401':
          description: >-
            Unauthorised (e.g. when an unauthenticated user tries to access a
            protected resource)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualResponse'
        '403':
          description: >-
            Forbidden (e.g. the resource is protected for all users or the user
            is authenticated but s/he is not granted for this resource)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualResponse'
  /individual/{id}:
    post:
      description: |
        Get an individual by its Id.
      operationId: postIndividualById
      tags:
        - Endpoints
      parameters:
        - name: id
          in: path
          description: Individual ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
        required: true
      responses:
        '200':
          description: |
            Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualResponse'
        '400':
          description: |
            Bad request (e.g. missing mandatory parameter)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualResponse'
        '401':
          description: >-
            Unauthorised (e.g. when an unauthenticated user tries to access a
            protected resource)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualResponse'
        '403':
          description: >-
            Forbidden (e.g. the resource is protected for all users or the user
            is authenticated but s/he is not granted for this resource)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualResponse'
  /individual/{id}/biosamples:
    post:
      description: |
        Get biosamples found in this individual.
      operationId: postBiosamplesByIndividualId
      tags:
        - Endpoints
      parameters:
        - name: id
          in: path
          description: Individual ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
        required: true
      responses:
        '200':
          description: |
            Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BiosampleResponse'
        '400':
          description: |
            Bad request (e.g. missing mandatory parameter)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BiosampleResponse'
        '401':
          description: >-
            Unauthorised (e.g. when an unauthenticated user tries to access a
            protected resource)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BiosampleResponse'
        '403':
          description: >-
            Forbidden (e.g. the resource is protected for all users or the user
            is authenticated but s/he is not granted for this resource)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BiosampleResponse'
  /individual/{id}/g_variants:
    post:
      description: |
        Get variants that have been stored for  this individual.
      operationId: postVariantsByIndividualId
      tags:
        - Endpoints
      parameters:
        - name: id
          in: path
          description: Individual ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
        required: true
      responses:
        '200':
          description: |
            Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenomicVariantResponse'
        '400':
          description: |
            Bad request (e.g. missing mandatory parameter)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenomicVariantResponse'
        '401':
          description: >-
            Unauthorised (e.g. when an unauthenticated user tries to access a
            protected resource)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenomicVariantResponse'
        '403':
          description: >-
            Forbidden (e.g. the resource is protected for all users or the user
            is authenticated but s/he is not granted for this resource)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenomicVariantResponse'
  /biosamples:
    post:
      description: |
        Get response to a beacon query for biosample information.
      operationId: postSampleResponse
      tags:
        - Endpoints
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
        required: true
      responses:
        '200':
          description: |
            Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BiosampleResponse'
        '400':
          description: |
            Bad request (e.g. missing mandatory parameter)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BiosampleResponse'
        '401':
          description: >-
            Unauthorised (e.g. when an unauthenticated user tries to access a
            protected resource)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BiosampleResponse'
        '403':
          description: >-
            Forbidden (e.g. the resource is protected for all users or the user
            is authenticated but they are not granted for this resource)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BiosampleResponse'
  /biosample/{id}:
    post:
      description: |
        Get a biosample by its Id.
      operationId: postBiosampleById
      tags:
        - Endpoints
      parameters:
        - name: id
          in: path
          description: Biosample ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
        required: true
      responses:
        '200':
          description: |
            Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BiosampleResponse'
        '400':
          description: |
            Bad request (e.g. missing mandatory parameter)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BiosampleResponse'
        '401':
          description: >-
            Unauthorised (e.g. when an unauthenticated user tries to access a
            protected resource)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BiosampleResponse'
        '403':
          description: >-
            Forbidden (e.g. the resource is protected for all users or the user
            is authenticated but they are not granted for this resource)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BiosampleResponse'
  /biosample/{id}/individuals:
    post:
      description: |
        Get the individual to whom this biosample belongs to.
      operationId: postInvidigualsByBiosampleId
      tags:
        - Endpoints
      parameters:
        - name: id
          in: path
          description: Biosample ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
        required: true
      responses:
        '200':
          description: |
            Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualResponse'
        '400':
          description: |
            Bad request (e.g. missing mandatory parameter)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualResponse'
        '401':
          description: >-
            Unauthorised (e.g. when an unauthenticated user tries to access a
            protected resource)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualResponse'
        '403':
          description: >-
            Forbidden (e.g. the resource is protected for all users or the user
            is authenticated but s/he is not granted for this resource)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualResponse'
  /biosample/{id}/g_variants:
    post:
      description: |
        Get the variants that have been stored for this biosample.
      operationId: postVariantsByBiosampleId
      tags:
        - Endpoints
      parameters:
        - name: id
          in: path
          description: Biosample ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
        required: true
      responses:
        '200':
          description: |
            Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenomicVariantResponse'
        '400':
          description: |
            Bad request (e.g. missing mandatory parameter)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenomicVariantResponse'
        '401':
          description: >-
            Unauthorised (e.g. when an unauthenticated user tries to access a
            protected resource)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenomicVariantResponse'
        '403':
          description: >-
            Forbidden (e.g. the resource is protected for all users or the user
            is authenticated but s/he is not granted for this resource)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenomicVariantResponse'
  /g_variants:
    post:
      description: |
        Any kind of genomic query that wants to query variants.
      operationId: postGenomicVariant
      tags:
        - Endpoints
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
        required: true
      responses:
        '200':
          description: |
            Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenomicVariantResponse'
        '400':
          description: |
            Bad request (e.g. missing mandatory parameter)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenomicVariantResponse'
        '401':
          description: >-
            Unauthorised (e.g. when an unauthenticated user tries to access a
            protected resource)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenomicVariantResponse'
        '403':
          description: >-
            Forbidden (e.g. the resource is protected for all users or the user
            is authenticated but s/he is not granted for this resource)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenomicVariantResponse'
  /g_variant/{id}:  
    post:
      description: |
        Get a variant by its Id.
      operationId: getGenomicVariantById
      tags:
        - Endpoints
      parameters:
        - name: id
          in: path
          description: Variant ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
      responses:
        '200':
          description: |
            Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenomicVariantResponse'
        '400':
          description: |
            Bad request (e.g. missing mandatory parameter)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenomicVariantResponse'
        '401':
          description: >-
            Unauthorised (e.g. when an unauthenticated user tries to access a
            protected resource)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenomicVariantResponse'
        '403':
          description: >-
            Forbidden (e.g. the resource is protected for all users or the user
            is authenticated but s/he is not granted for this resource)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenomicVariantResponse'
  /g_variant/{id}/biosamples:  
    post:
      description: |
        Get the biosamples where this variant is found.
      operationId: getBiosamplesByVariantId
      tags:
        - Endpoints
      parameters:
        - name: id
          in: path
          description: Variant ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
      responses:
        '200':
          description: |
            Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BiosampleResponse'
        '400':
          description: |
            Bad request (e.g. missing mandatory parameter)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BiosampleResponse'
        '401':
          description: >-
            Unauthorised (e.g. when an unauthenticated user tries to access a
            protected resource)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BiosampleResponse'
        '403':
          description: >-
            Forbidden (e.g. the resource is protected for all users or the user
            is authenticated but s/he is not granted for this resource)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BiosampleResponse'
  /g_variant/{id}/individuals:  
    post:
      description: |
        Get the individuals in which this variant is found.
      operationId: getIndividualsByVariantId
      tags:
        - Endpoints
      parameters:
        - name: id
          in: path
          description: Variant ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
      responses:
        '200':
          description: |
            Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualResponse'
        '400':
          description: |
            Bad request (e.g. missing mandatory parameter)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualResponse'
        '401':
          description: >-
            Unauthorised (e.g. when an unauthenticated user tries to access a
            protected resource)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualResponse'
        '403':
          description: >-
            Forbidden (e.g. the resource is protected for all users or the user
            is authenticated but they are not granted for this resource)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualResponse'
components:
  schemas:
    Chromosome:
      description: |
        Reference name (chromosome). Accepting values 1-22, X, Y, MT.
      type: string
      enum:
        - '1'
        - '2'
        - '3'
        - '4'
        - '5'
        - '6'
        - '7'
        - '8'
        - '9'
        - '10'
        - '11'
        - '12'
        - '13'
        - '14'
        - '15'
        - '16'
        - '17'
        - '18'
        - '19'
        - '20'
        - '21'
        - '22'
        - 'X'
        - 'Y'
        - 'MT'
    Assembly:
      description: |
        Assembly identifier (GRC notation, e.g. GRCh37).
      type: string
      example: GRCh38
    ReferenceBases:
      description: |
        Reference bases for this variant (starting from `start`). 
        Accepted values: [ACGTN]*. N is a wildcard, that denotes the 
        position of any base, and can be used as a standalone base of any 
        type or within a partially known sequence. For example a sequence 
        where the first and last bases are known, but the middle portion can 
        exhibit countless variations of [ACGT], or the bases are unknown: 
        ANNT the Ns can take take any form of [ACGT], which makes both ACCT 
        and ATGT (or any other combination) viable sequences.
      type: string
      pattern: '^([ACGTN]+)$'
    AlternateBases:
      description: |
        The bases that appear instead of the reference bases. Accepted 
        values: [ACGTN]*. N is a wildcard, that denotes the position of any 
        base, and can be used as a standalone base of any type or within a 
        partially known sequence. For example a sequence where the first and 
        last bases are known, but the middle portion can exhibit countless 
        variations of [ACGT], or the bases are unknown: ANNT the Ns can take 
        take any form of [ACGT], which makes both ACCT and ATGT (or any 
        other combination) viable sequences.
        Symbolic ALT alleles (DEL, INS, DUP, INV, CNV, DUP:TANDEM, DEL:ME,
        INS:ME) will be represented in `variantType`.
        Optional: either `alternateBases` or `variantType` is required.
      type: string
      pattern: '^([ACGTN]+)$'
    Filters:
      description: |
        Ontology based filters. CURIE syntax is encouraged to be used.
      type: array
      items:
        type: string
      example: 'BTO:0000199'
    CustomFilters:
      description: |
        Custom filters defined by this Beacon.
      type: array
      items:
        type: string
      example: 'mydict.aterm:avalue,mydict.aterm2:avalue2'
    
    RequestDatasets:
      description: >-
        Identifiers of datasets, as defined in `BeaconDataset`. If this
        field is null/not specified, all datasets should be queried.
      type: object
      properties:
        datasetIds:
          description: >
            List of dataset Ids to be searched.
          type: array
          items:
            type: string
        includeDatasetResponses:
          description: >-
            Indicator of whether responses for individual datasets
            (`DatasetAlleleResponses`) should be included in the response
            (`BeaconAlleleResponse`) to this request or not. If null (not
            specified), the default value of NONE is assumed.
          type: string
          enum:
            - ALL
            - HIT
            - MISS
            - NONE
    RequestedSchemas:
      description: |
        Format of the responses and version of the Beacon handling this request.
      type: object
      properties:
        Variant:
          type: array
          items:
            type: string
          example:
            - ga4gh-variant-representation-v0.1
            - ga4gh-schemablocks-beacon-variant-v0.1
        VariantAnnotation:
          type: array
          items:
            type: string
          example:
            - beacon-variant-annotation-v0.1
        Individual:
          type: array
          items:
            type: string
          example: 
              - ga4gh-phenopacket-individual-v0.1
              - ga4gh-schemablocks-individual-v0.1
        Biosample:
          type: array
          items:
            type: string
          example:
            - ga4gh-phenopacket-biosample-v0.1
            - ga4gh-schemablocks-biosample-v0.1
    RequestMeta:
      description: |
        Requested schemas and versions to be used in the response.
      type: object
      properties:
        requestedSchemas:
          $ref: '#/components/schemas/RequestedSchemas'
        apiVersion:
          description: |
            Schemas & versions default for this Beacon version will be used to format the response.
          type: string
          example: 'v2.0'
    
    ResponseBasicStructure:
      description: |
        Description pending
      type: object
      required:
        - version
        - value
      properties:
        version:
          type: string
          example: 'beacon-individual-v1.0'
        value:
          type: object
    # ResponseResult:
    #   description: |
    #     Description pending
    #   required:
    #     - defaultSchema
    #   properties:
    #     defaultSchema:
    #       $ref: '#/components/schemas/ResponseBasicStructure'
    #     alternativeSchemas:
    #       type: array
    #       items:
    #         $ref: '#/components/schemas/ResponseBasicStructure'
    
    VariantDefault:
      description: |
        Default schema for variant
      required:
        - version
        - value
      properties:
        version:
          description: |
            Version of the schema
          type: string
          example: beacon-variant-v0.1
        value:
          $ref: 'https://raw.githubusercontent.com/ga4gh-beacon/specification-v2-default-schemas/master/default_schemas.yaml#/components/schemas/VariantDetails'
    Variant:
      description: |
        Default schema for variant
      required:
        - defaultSchema
        - alternativeSchemas
      properties:
        defaultSchema:
          $ref: '#/components/schemas/VariantDefault'
        alternativeSchemas:
          type: array
          items:
            $ref: '#/components/schemas/ResponseBasicStructure'
    VariantAnnotationDefault:
      description: |
        Default schema for variant annotation
      required:
        - version
        - value
      properties:
        version:
          description: |
            Version of the schema
          type: string
          example: beacon-variant-annotation-v0.1
        value:
          $ref: 'https://raw.githubusercontent.com/ga4gh-beacon/specification-v2-default-schemas/master/default_schemas.yaml#/components/schemas/VariantAnnotations'
    VariantAnnotation:
      description: |
        Default schema for variant annotation
      required:
        - defaultSchema
        - alternativeSchemas
      properties:
        defaultSchema:
          $ref: '#/components/schemas/VariantAnnotationDefault'
        alternativeSchemas:
          type: array
          items:
            $ref: '#/components/schemas/ResponseBasicStructure'
    VariantReponseResults:
      description: |
        Description pending
      properties:
        variant:
          $ref: '#/components/schemas/Variant'
        variantAnnotations:
          $ref: '#/components/schemas/VariantAnnotation'
        variantHandover:
          type: array
          items:
            $ref: '#/components/schemas/Handover'
        datasetAlleleRespones:
          type: array
          items:
            $ref: '#/components/schemas/BeaconDatasetAlleleResponse'
    
    Pagination:
      description: |
        Pagination to apply on the results.
      type: object
      properties:
        skip:
          description: |
            Number of pages to skip.
          type: integer
          default: 0
          example: 0
        limit:
          description: |
            Size of the page.
          type: integer
          default: 10
          example: 10
    
    Request:
      description: |
        Search for a genomic region
      type: object
      required:
        - meta
        - query
      properties:
        meta:
          $ref: '#/components/schemas/RequestMeta'
        query:
          $ref: '#/components/schemas/RequestQuery'
    RequestQuery:
      description: |
        Description pending
      type: object
      properties:
        individual:
          $ref: '#/components/schemas/IndividualFields'
        biosample:
          $ref: '#/components/schemas/BiosampleFields'
        g_variant:
          $ref: '#/components/schemas/GenomicVariantFields'
        datasets:
          $ref: '#/components/schemas/RequestDatasets'
        filters:
         $ref: '#/components/schemas/Filters'
        customFilters:
          $ref: '#/components/schemas/CustomFilters'
        pagination:
          $ref: '#/components/schemas/Pagination'
    GenomicVariantFields:
      description: |
        All the required fields to query any kind of variant (e.g. SNP, DUP, 
        etc.).
      type: object
      properties:
        id:
          description: |
            Id of the variant to display.
          type: string
        assemblyId:
          $ref: '#/components/schemas/Assembly'
        referenceName:
          $ref: '#/components/schemas/Chromosome'
        start:
          description: |
            Precise or fuzzy start coordinate position(s), allele locus 
            (0-based, inclusive).
            * start only:
              - for single positions, e.g. the start of a specified sequence 
              alteration where the size is given through the specified 
              `alternateBases`
              - typical use are queries for SNV and small InDels
              - THIS IS NOT TRUE FOR RANGE QUERIES!!!! -> the use of "start" 
              without an "end" parameter requires the use of "referenceBases"
            * `start` and `end`:
              - special use case for exactly determined structural changes
            * use 2 values for querying imprecise positions (e.g. identifying 
            all structural variants starting anywhere between `start[0]` <-> 
            `start[1]`, and ending anywhere between `end[0]` <-> `end[1]`)
            * IS THIS NECESSARY???? -> single or double sided precise matches 
            can be achieved by setting `start[0]` = `start[1]` XOR `end[0]` = 
            `end[1]`
          type: array
          items:
            type: integer
            format: int64
          minimum: 0
        end:
          description: |
            Precise or fuzzy end coordinate(s) (0-based, exclusive). See start. 
            For fuzzy matches, provide 2 values in the array (e.g. [111,222]).
          type: array
          items:
            type: integer
            format: int64
        referenceBases:
          $ref: '#/components/schemas/ReferenceBases'
        alternateBases:
          $ref: '#/components/schemas/AlternateBases'
        variantType:
          description: |
            The `variantType` is used to denote e.g. structural variants.
            Examples:
            * DUP: duplication of sequence following `start`; not necessarily in
            situ
            * DEL: deletion of sequence following `start`
            * BND: breakend, i.e. termination of the allele at position
                  `start` or in the `startMin` => `startMax` interval, or fusion
                  of the sequence to distant partner
            Optional: either `alternateBases` or `variantType` is required.
          type: string
        mateName:
          $ref: '#/components/schemas/Chromosome'
    IndividualFields:
      description: |
        Fields to filter by individual.
      type: object
      properties:
        id:
          description: |
            Id of the individual to display.
          type: string
    BiosampleFields:
      description: |
        Fields to filter by biosample.
      type: object
      properties:
        id:
          description: |
            Id of the biosample to display.
          type: string
    ResponseMeta:
      description: |
        Meta information about a genomic variant reponse.
      type: object
      properties:
        beaconId:
          description: |
            Identifier of the beacon, as defined in `Beacon`.
          type: string
        apiVersion:
          description: >-
            Version of the API. If specified, the value must match `apiVersion`
            in Beacon
          type: string
        receivedRequest:
          $ref: '#/components/schemas/Request'
        returnedSchemas:
          $ref: '#/components/schemas/RequestedSchemas'
          
    GenomicVariantResponse:
      description: |
        Response of a genomic variant query
      type: object
      required:
        - meta
        - response
      properties:
        meta:
          $ref: '#/components/schemas/ResponseMeta'
        response:
          $ref: '#/components/schemas/GenomicVariantResponseContent'

    GenomicVariantResponseContent:
      description: |
        Description pending
      type: object
      required:
        - exists
        - results
      properties:
        exists:
          description: |
            Indicator of whether any variant was observed in any of the
            datasets queried. This should be non-null, unless there was an
            error, in which case `error` has to be non-null.
          type: boolean
        error:
          $ref: '#/components/schemas/BeaconError'
        results:
          type: array
          items:
            $ref: '#/components/schemas/VariantReponseResults'
        info:
          type: object
        resultsHandover:
          type: array
          items:
            $ref: '#/components/schemas/Handover'
        beaconHandover:
          type: array
          items:
            $ref: '#/components/schemas/Handover'
    
    # IndividualRequest:
    #   description: |
    #     Description pending
    #   type: object
    #   required:
    #     - meta
    #     - query
    #   properties:
    #     meta:
    #       $ref: '#/components/schemas/RequestMeta'
    #     query:
    #       $ref: '#/components/schemas/RequestQuery'
    IndividualResponse:
      description: |
        Response of a query over individuals.
      type: object
      required:
        - meta
        - response
      properties:
        meta:
          $ref: '#/components/schemas/ResponseMeta'
        response:
          $ref: '#/components/schemas/IndividualResponseContent'
    IndividualResponseContent:
      description: |
        Description pending
      type: object
      required:
        - exists
        - results
      properties:
        exists:
          description: |
            Indicator of whether any individual was observed in any of the
            datasets queried. This should be non-null, unless there was an
            error, in which case `error` has to be non-null.
          type: boolean
        error:
          $ref: '#/components/schemas/BeaconError'
        results:
          type: array
          items:
            $ref: '#/components/schemas/IndividualResponseResults'
        info:
          type: object
        resultsHandover:
          $ref: '#/components/schemas/Handover'
        beaconHandover:
          $ref: '#/components/schemas/Handover'
    IndividualResponseResults:
      description: |
        Default schema for describing invididuals.
      required:
        - defaultSchema
      properties:
        defaultSchema:
          $ref: '#/components/schemas/IndividualDefault'
        alternativeSchemas:
          type: array
          items:
            $ref: '#/components/schemas/ResponseBasicStructure'
    IndividualDefault:
      description: |
        Default schema for variant annotation
      required:
        - version
        - value
      properties:
        version:
          description: |
            Version of the schema
          type: string
          example: beacon-individual-v0.1
        value:
          $ref: 'https://raw.githubusercontent.com/ga4gh-beacon/specification-v2-default-schemas/master/default_schemas.yaml#/components/schemas/Individual'
    
    # BiosampleRequest:
    #   description: |
    #     Description pending
    #   type: object
    #   required:
    #     - meta
    #     - query
    #   properties:
    #     meta:
    #       $ref: '#/components/schemas/RequestMeta'
    #     query:
    #       $ref: '#/components/schemas/RequestQuery'
    BiosampleResponse:
      description: |
        Response of a query over biosamples.
      type: object
      required:
        - meta
        - response
      properties:
        meta:
          $ref: '#/components/schemas/ResponseMeta'
        response:
          $ref: '#/components/schemas/BiosampleResponseContent'
    BiosampleResponseContent:
      description: |
        Description pending
      type: object
      required:
        - exists
        - results
      properties:
        exists:
          description: |
            Indicator of whether any biosample was observed in any of the
            datasets queried. This should be non-null, unless there was an
            error, in which case `error` has to be non-null.
          type: boolean
        error:
          $ref: '#/components/schemas/BeaconError'
        results:
          type: array
          items:
            $ref: '#/components/schemas/BiosampleResponseResults'
        info:
          type: object
        resultsHandover:
          type: array
          items:
            $ref: '#/components/schemas/Handover'
        beaconHandover:
          type: array
          items:
            $ref: '#/components/schemas/Handover'
    BiosampleResponseResults:
      description: |
        Default schema for describing biosamples.
      required:
        - defaultSchema
      properties:
        defaultSchema:
          $ref: '#/components/schemas/BiosampleDefault'
        alternativeSchemas:
          description: |
            Other schemas to represent biosample data. It can be empty.
          type: array
          items:
            $ref: '#/components/schemas/ResponseBasicStructure'
    BiosampleDefault:
      description: |
        Default schema for variant annotation
      required:
        - version
        - value
      properties:
        version:
          description: |
            Version of the schema
          type: string
          example: beacon-biosample-v0.1
        value:
          $ref: 'https://raw.githubusercontent.com/ga4gh-beacon/specification-v2-default-schemas/master/default_schemas.yaml#/components/schemas/Biosample'
    
    Beacon:
      description: |
        Metadata describing a beacon instance.
      type: object
      required:
        - id
        - name
        - apiVersion
        - environment
        - organization
        - datasets
      properties:
        id:
          type: string
          description: |
            Unique identifier of the beacon. Use reverse domain name notation.
          example: org.ga4gh.beacon
        name:
          type: string
          description: |
            Name of the beacon.
        apiVersion:
          type: string
          description: Version of the API provided by the beacon.
          example: v0.3
        environment:
          type: string
          description: |
            Environment the service is running in. Use this to distinguish 
            between production, development and testing/staging deployments.
          enum:
          - prod
          - test
          - dev
          - staging
          example: dev
        organization:
          $ref: '#/components/schemas/BeaconOrganization'
        description:
          type: string
          description: |
            Description of the beacon.
        version:
          type: string
          description: |
            Version of the beacon.
          example: v0.1
        welcomeUrl:
          type: string
          description: |
            URL to the welcome page for this beacon (RFC 3986 format).
          example: 'http://example.org/wiki/Main_Page'
        alternativeUrl:
          type: string
          description: >-
            Alternative URL to the API, e.g. a restricted version of this beacon
            (RFC 3986 format).
          example: 'http://example.org/wiki/Main_Page'
        createDateTime:
          type: string
          description: |
            The time the beacon was created (ISO 8601 format).
          example: '2012-07-19 or 2017-01-17T20:33:40Z'
        updateDateTime:
          type: string
          description: |
            The time the beacon was updated in (ISO 8601 format).
          example: '2012-07-19 or 2017-01-17T20:33:40Z'
        datasets:
          description: >-
            Dataset(s) served by the beacon.
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/BeaconDataset'
        sampleAlleleRequests:
          description: >-
            Examples of interesting queries, e.g. a few queries demonstrating
            different responses.
          type: array
          items:
            $ref: '#/components/schemas/BeaconAlleleRequest'
        info:
          description: |
            Additional unspecified metadata about the Beacon service.
          type: object
          example:
            additionalInfoKey1: additionalInfoValue1
            additionalInfoKey2: 
                - additionalInfoValue2
                - additionalInfoValue3
    BeaconAlleleRequest:
      description: |
        Allele request made against the beacon. The allele must be mapped 
        against a sequence in a genome, and a range can be optionally specified.
      type: object
      required:
        - referenceName
        - referenceBases
        - assemblyId
      properties:
        referenceName:
          $ref: '#/components/schemas/Chromosome'
        start:
          description: |
            Precise start coordinate position, allele locus (0-based, inclusive).
            * start only:
              - for single positions, e.g. the start of a specified sequence 
              alteration where the size is given through the specified 
              `alternateBases`
              - typical use are queries for SNV and small InDels
              - the use of "start" without an "end" parameter requires the use 
              of "referenceBases"
            * start and end:
              - special use case for exactly determined structural changes
          type: integer
          format: int64
          minimum: 0
        end:
          description: Precise end coordinate (0-based, exclusive). See start.
          type: integer
        startMin:
          description: |
            Minimum start coordinate
            * startMin + startMax + endMin + endMax
              - for querying imprecise positions (e.g. identifying all 
              structural variants starting anywhere between `startMin` <-> 
              `startMax`, and ending anywhere between endMin <-> endMax)
              - single or double sided precise matches can be achieved by 
              setting `startMin` = `startMax` XOR `endMin` = `endMax`
          type: integer
        startMax:
          description: |
            Maximum start coordinate. See `startMin`.
          type: integer
        endMin:
          description: |
            Minimum end coordinate. See `startMin`.
          type: integer
        endMax:
          description: |
            Maximum end coordinate. See `startMin`.
          type: integer
        referenceBases:
          $ref: '#/components/schemas/ReferenceBases'
        alternateBases:
          $ref: '#/components/schemas/AlternateBases'
        variantType:
          description: |
            The `variantType` is used to denote e.g. structural variants.

            Examples:
            * DUP: duplication of sequence following `start`; not necessarily in
            situ
            * DEL: deletion of sequence following `start`
            * BND: breakend, i.e. termination of the allele at position
                  `start` or in the `startMin` => `startMax` interval, or fusion
                  of the sequence to distant partner


            Optional: either `alternateBases` or `variantType` is required.
          type: string
        mateName:
          $ref: '#/components/schemas/Chromosome'
        assemblyId:
          description: |
            Assembly identifier (GRC notation, e.g. `GRCh37`).
          type: string
          example: GRCh38
        datasetIds:
          description: >-
            Identifiers of datasets, as defined in `BeaconDataset`. If this
            field is null/not specified, all datasets should be queried.
          type: array
          items:
            type: string
        includeDatasetResponses:
          description: >-
            Indicator of whether responses for individual datasets
            (datasetAlleleResponses) should be included in the response
            (BeaconAlleleResponse) to this request or not. If null (not
            specified), the default value of NONE is assumed.
          type: string
          enum:
            - ALL
            - HIT
            - MISS
            - NONE
    BeaconOrganization:
      description: |
        Organization owning the beacon.
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: |
            Unique identifier of the organization.
        name:
          type: string
          description: |
            Name of the organization.
        description:
          type: string
          description: |
            Description of the organization.
        address:
          type: string
          description: |
            Address of the organization.
        welcomeUrl:
          type: string
          description: |
            URL of the website of the organization (RFC 3986 format).
        contactUrl:
          type: string
          description: >-
            URL with the contact for the beacon operator/maintainer, e.g. link
            to a contact form (RFC 3986 format) or an email (RFC 2368 format).
        logoUrl:
          type: string
          description: >-
            URL to the logo (PNG/JPG/SVG format) of the organization (RFC 3986
            format).
        info:
          description: |
            Additional unspecified metadata about the host Organization.
          type: object
          example:
            additionalInfoKey: additionalInfoValue
    BeaconDataset:
      description: |
        A dataset available in the beacon.
      type: object
      required:
        - id
        - name
        - assemblyId
        - createDateTime
        - updateDateTime
      properties:
        id:
          type: string
          description: |
            Unique identifier of the dataset.
        name:
          type: string
          description: |
            Name of the dataset.
        description:
          type: string
          description: |
            Description of the dataset.
        assemblyId:
          description: |
            Assembly identifier (GRC notation, e.g. `GRCh37`).
          type: string
          example: GRCh38
        createDateTime:
          type: string
          description: |
            The time the dataset was created (ISO 8601 format).
          example: '2012-07-29 or 2017-01-17T20:33:40Z'
        updateDateTime:
          type: string
          description: |
            The time the dataset was updated in (ISO 8601 format).
          example: '2012-07-19 or 2017-01-17T20:33:40Z'
        version:
          type: string
          description: |
            Version of the dataset.
        variantCount:
          type: integer
          format: int64
          description: |
            Total number of variants in the dataset.
          minimum: 0
        callCount:
          type: integer
          format: int64
          description: |
            Total number of calls in the dataset.
          minimum: 0
        sampleCount:
          type: integer
          format: int64
          description: |
            Total number of samples in the dataset.
          minimum: 0
        externalUrl:
          type: string
          description: >-
            URL to an external system providing more dataset information (RFC
            3986 format).
          example: 'http://example.org/wiki/Main_Page'
        info:
          description: |
            Additional unspecified metadata about the dataset.
          type: object
          example:
            additionalInfoKey1: 
              - additionalInfoValue1
              - additionalInfoValue2]
            additionalInfoKey2: additionalInfoValue3
        dataUseConditions:
          $ref: '#/components/schemas/DataUseConditions'
    BeaconDatasetAlleleResponse:
      description: |
        Response containing information about an allele in a particular dataset.
      type: object
      required:
        - datasetId
      properties:
        datasetId:
          type: string
          description: |
            not provided
        exists:
          description: >-
            Indicator of whether the given allele was observed in the dataset.
            This should be non-null, unless there was an error, in which case
            `error` has to be non-null.
          type: boolean
        frequency:
          type: number
          description: |
            Frequency of this allele in the dataset. Between 0 and 1, inclusive.
          minimum: 0
          maximum: 1
        variantCount:
          type: integer
          format: int64
          description: |
            Number of times the requested allele has been observed in the 
            dataset.
          minimum: 0
        callCount:
          type: integer
          format: int64
          description: |
            Total number of calls in the dataset. Missing calls are not 
            included.
          minimum: 0
        sampleCount:
          type: integer
          format: int64
          description: |
            Number of samples in the dataset where the requested allele is 
            found.
          minimum: 0
        note:
          type: string
          description: |
            Additional note or description of the response.
        externalUrl:
          type: string
          description: >-
            URL to an external system, such as a secured beacon or a system
            providing more information about a given allele (RFC 3986 format).
        info:
          description: |
            Additional unspecified metadata about the dataset response or its 
            content.
          type: object
          example:
            additionalInfoKey1: 
              - additionalInfoValue1
              - additionalInfoValue2]
            additionalInfoKey2: additionalInfoValue3
        datasetHandover:
          type: array
          items:
            $ref: '#/components/schemas/Handover'
    BeaconError:
      description: >-
        Beacon-specific error. This should be non-null in exceptional situations
        only, in which case `exists` has to be null.
      type: object
      required:
        - errorCode
      properties:
        errorCode:
          type: integer
          format: int32
          example: 'same as HTTP status code'
        errorMessage:
          type: string
    DataUseConditions:
      type: object
      required:
        - consentCodeDataUse
        - adamDataUse
      description: |
        Data use conditions ruling this dataset.
      properties:
        consentCodeDataUse:
          $ref: >-
            https://raw.githubusercontent.com/ga4gh/ga4gh-consent-policy/v1.1.0/consent_code.yaml#/components/schemas/ConsentCodeDataUse
        adamDataUse:
          $ref: >-
            https://raw.githubusercontent.com/ga4gh/ADA-M/v1.0.1/adam.yaml#/components/schemas/Adam
    Handover:
      type: object
      required:
        - handoverType
        - url
      properties:
        handoverType:
          $ref: '#/components/schemas/HandoverType'
        note:
          type: string
          description: |
            An optional text including considerations on the handover link 
            provided.
          example: |
            This handover link provides access to a summarized VCF. To access 
            the VCF containing the details for each sample filling an 
            application is required. See Beacon contact information details.
        url:
          type: string
          description: |
            URL endpoint to where the handover process could progress (in RFC 
            3986 format).
          example: |
            "https://api.mygenomeservice.org/handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/"
    HandoverType:
      type: object
      required:
        - id
      description: |
            Handover type, as an Ontology_term object with CURIE syntax for the 
            `id` value. 
      properties:
        id:
          type: string
          description: >-
            Use `CUSTOM` for the `id` when no ontology is available.
          default: CUSTOM
          example: "EFO:0004157"
        label:
          type: string
          description: >-
            This would be the "preferred Label" in the case of an ontology term.
          default: null
          example: "BAM format"
